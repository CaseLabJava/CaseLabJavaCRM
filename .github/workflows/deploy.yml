name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  export_env:
    name: Export_env
    runs-on: ubuntu-latest
    steps:
      - name: Connect with SSH and export
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: 45.130.43.231
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            rm /home/user/.env
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export REFRESH_TOKEN=${{ secrets.REFRESH_TOKEN }}
            export ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }}
            export MINIO_ACCESS=${{ secrets.MINIO_ACCESS }}
            export MINIO_SECRET=${{ secrets.MINIO_SECRET }}
            export MINIO_URL=${{ secrets.MINIO_URL }}
            export MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            export MAIL_PORT=${{ secrets.MAIL_PORT }}
            export MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            export JWT_TECHNICAL_USER=${{ secrets.JWT_TECHNICAL_USER }}
            export CLIENT_REFRESH_TOKEN=${{ secrets.CLIENT_REFRESH_TOKEN }}
            export CLIENT_ACCESS_TOKEN=${{ secrets.CLIENT_ACCESS_TOKEN }}

            echo JWT_TECHNICAL_USER=${{ secrets.JWT_TECHNICAL_USER }} >> /home/user/.env
            echo CLIENT_REFRESH_TOKEN=${{ secrets.CLIENT_REFRESH_TOKEN }} >> /home/user/.env
            echo CLIENT_ACCESS_TOKEN=${{ secrets.CLIENT_ACCESS_TOKEN }} >> /home/user/.env
            echo MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} >> /home/user/.env
            echo MAIL_PORT=${{ secrets.MAIL_PORT }} >> /home/user/.env
            echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> /home/user/.env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> /home/user/.env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> /home/user/.env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> /home/user/.env
            echo ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }} >> /home/user/.env
            echo REFRESH_TOKEN=${{ secrets.REFRESH_TOKEN }} >> /home/user/.env
            echo MINIO_ACCESS=${{ secrets.MINIO_ACCESS }} >> /home/user/.env
            echo MINIO_SECRET=${{ secrets.MINIO_SECRET }} >> /home/user/.env
            echo MINIO_URL=${{ secrets.MINIO_URL }} >> /home/user/.env
            cd /home/user/project && export $(cat /home/user/.env | xargs) && env

#  push_compose:
#    name: Push docker-compose.yaml to remote server
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Copy docker-compose.yaml via SSH
#        uses: appleboy/scp-action@master
#        with:
#          host: 45.130.43.231
#          username: ${{ secrets.SSH_USER }}
#          password: ${{ secrets.SSH_PASSWORD }}
#          port: 22
#          source: "docker-compose.yaml"
#          target: "/home/${{ secrets.SSH_USER }}"
#          overwrite: true
  
#  build_image:
#    runs-on: ubuntu-latest
#    name: Build app image
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Login to hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Build and push
#        uses: docker/build-push-action@v5
#        with:
#          push: true
#          tags: sladkkov/case-lab-java-crm:latest

  deploy:
    name: Deploy
    needs: [ export_env ]
    runs-on: ubuntu-latest
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: 45.130.43.231
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            docker container stop $(docker container ls -q)
            docker rm $(docker ps -a -q) 
            docker rmi $(docker images -q)
            rm -rf /home/user/project/develop
            cd /home/user/project
            git clone https://github.com/CaseLabJava/CaseLabJavaCRM.git develop
            cd develop
            mvn package -Dmaven.test.skip=true
            docker compose up -d
#            docker container stop $(docker container ls -q)
#            docker stop case-lab-java-crm
#            docker rm case-lab-java-crm
#            docker rm $(docker ps -a -q) 
#            docker rmi $(docker images -q)
