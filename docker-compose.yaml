version: "v2.21.0"

services:
  discovery-service:
    image: andreynachevny/discovery-service:latest
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always
    networks:
      - case-lab
    ports:
      - 8761:8761

  redis:
    image: redis:7.2.3-alpine
    container_name: redis
    ports:
      - 6379:6379
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
      REDIS_DATABASE: 1
    networks:
      - case-lab
    volumes:
      - /var/lib/redis/data/etc/redis.conf:/usr/local/etc/redis/redis.conf

  case-lab-db:
    image: postgres:14-alpine
    container_name: case-lab-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${CRM_DB_NAME}
    restart: always
    command: >
      bash -c '
        max_connections=300
        psql -U ${POSTGRES_USER} -d ${CRM_DB_NAME} -c "CREATE DATABASE ${ACQUIRING_DB_NAME} WITH OWNER = ${POSTGRES_USER} PASSWORD '\''${POSTGRES_PASSWORD}'\'';";
        psql -U ${POSTGRES_USER} -d ${CRM_DB_NAME} -c "CREATE DATABASE ${CLIENT_SERVICE_DB_NAME} WITH OWNER = ${POSTGRES_USER} PASSWORD '\''${POSTGRES_PASSWORD}'\'';";
        psql -U ${POSTGRES_USER} -d ${CRM_DB_NAME} -c "CREATE DATABASE ${PAYMENT_DB_NAME} WITH OWNER = ${POSTGRES_USER} PASSWORD '\''${POSTGRES_PASSWORD}'\'';";
        postgres -c "max_connections=$max_connections";
        exec docker-entrypoint.sh postgres
      '
    networks:
      - case-lab
    healthcheck:
      test: [ "CMD", "pg_isready","-d","postgres","-U","postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - /var/lib/postgresql/data

  minio:
    container_name: minio
    image: minio/minio:latest
    command: server --console-address ":9090" /data/
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET}
    volumes:
      - ~/minio/data:/data
    networks:
      - case-lab

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: always
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: always
    networks:
      - kafka-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    networks:
      - kafka-net
    ports:
      - "9100:9100"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  crm-service:
    image: andreynachevny/crm-service:latest
    depends_on:
      discovery-service:
        condition: service_started
      case-lab-db:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - case-lab
    environment:
      CRM_DB_NAME: ${CRM_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_ACCESS: ${MINIO_ACCESS}
      MINIO_SECRET: ${MINIO_SECRET}
      MINIO_URL: ${MINIO_URL}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      ACCESS_TOKEN: ${ACCESS_TOKEN}
      REFRESH_TOKEN: ${REFRESH_TOKEN}
      POSTGRES_IP: ${POSTGRES_IP}
    ports:
      - 8080:8080

  client-service:
    image: andreynachevny/client-service:latest
    depends_on:
      discovery-service:
        condition: service_started
      case-lab-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - case-lab
    environment:
      POSTGRES_IP: ${POSTGRES_IP}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD}
      CLIENT_SERVICE_DB_NAME: ${CLIENT_SERVICE_DB_NAME}
    ports:
      - 8082:8082

  client-self-service:
    image: andreynachevny/client-self-service:latest
    depends_on:
      discovery-service:
        condition: service_started
      client-service:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - case-lab
    environment:
      CLIENT_ACCESS_TOKEN: ${CLIENT_ACCESS_TOKEN}
      CLIENT_REFRESH_TOKEN: ${CLIENT_REFRESH_TOKEN}
      JWT_TECHNICAL_USER: ${JWT_TECHNICAL_USER}
      REDIS_HOST_NAME: redis
    ports:
      - 8081:8081

  acquiring-service:
    image: andreynachevny/client-self-service:latest
    depends_on:
      discovery-service:
        condition: service_started
      case-lab-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - case-lab
      - kafka-net
    environment:
      POSTGRES_IP: ${POSTGRES_IP}
      POSTGRES_PORT: ${POSTGRES_PORT}
      ACQUIRING_DB_NAME: ${ACQUIRING_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    ports:
      - 8084:8084

  payment-service:
    image: andreynachevny/payment-service:latest
    depends_on:
      discovery-service:
        condition: service_started
      case-lab-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - case-lab
      - kafka-net
    environment:
      POSTGRES_IP: ${POSTGRES_IP}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PAYMENT_DB_NAME: ${PAYMENT_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 8083:8083
volumes:
  minio-storage:


networks:
  case-lab:
    driver: bridge
  kafka-net:
    driver: bridge